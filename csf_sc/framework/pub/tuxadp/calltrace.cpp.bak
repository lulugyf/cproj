#include <framework.h>

#include <string>
#include <iostream>
#include <list>
#include <time.h>
#include <sstream>

#include "calltrace.h"

using namespace std;


extern "C" {
	int udp_socket();
	void *udp_make_addr(const char *addr);
	int udp_sendto(int sd, void *addr, const char *buf, int len);
	void udp_close(int s);
	void udp_getlocaladdr(char addr[16]);
}


/*
<统一ID> <调用ID> <父调用ID> <服务编号> <服务名> <调用开始时间> <调用结束时间>
<主机IP> <端口号> <手机号> <工号> <模块代码> <结果编码> <结果信息>
 */
struct CallInfo{
    char __flag[4]; //检查是否指针是否是这个类型的标记: !_@
    list<string> callstack;
    const char * servicename;      //服务名称
    const char * bpname;        // 入口BP名称
    char universe_accept[128]; //统一流水
    int  log_flag;             // 服务开关是否打开， 1-是； 0-否
    int  log_handle;          // fd of udp socket
    void *log_path;            // sockaddr_in *addr, generate by udp_make_addr, and must free outer
    int  callid_seed;
    char login_no[64];
    char op_code[8];
    char phone_no[64];
    char localaddr[16];
    const char * push(const char *callid);
    void pop();
};




/*
struct TCtrlInfoEx2: TCtrlInfoEx
{
    void *reserve1;
    void *reserve2;
    void *reserve3;
    void *reserve4;

    TCtrlInfoEx2();
    ~TCtrlInfoEx2();
    void init(const char *servicename, const char *bpname, const utype *uin);
    const char *getServiceName();
    const char *getBPName();
};
*/



TCtrlInfoEx2::TCtrlInfoEx2() {
    memset(this, 0, sizeof(TCtrlInfoEx2));
    CallInfo *c = new CallInfo();
    memcpy(c->__flag, "!_@", 4);
    c->log_path = NULL;
    c->log_handle = -1;
    reserve1 = c;
}

TCtrlInfoEx2::~TCtrlInfoEx2(){
    CallInfo *c = (CallInfo *)reserve1;
    if(c->log_path != NULL)
    	free(c->log_path);
    if(c->log_handle != -1)
    	udp_close(c->log_handle);
    delete c;
}

const char *TCtrlInfoEx2::getServiceName(){
	CallInfo *c = (CallInfo *)reserve1;
	return c->servicename;
}

const char *TCtrlInfoEx2::getBPName(){
	CallInfo *c = (CallInfo *)reserve1;
	return c->bpname;
}




static char* uGetStrByName(const utype* pu, char* buf, int bufSize, const char* name)
{
    UPOS p;
    memset(buf, 0, bufSize);
    //查找当前utype下是否有名字为name的节点，如果有则返回节点值
    if(UPOS_END !=(p = utFind(pu, name)))
    {
		switch(pu->ppe[p]->type)
		{
			case U_INT:snprintf(buf, bufSize - 1, "%d", utGetInt(pu, name, p));break;
			case U_LONG:snprintf(buf, bufSize - 1, "%ld", utGetLong(pu, name, p));break;
			case U_DOUBLE:snprintf(buf, bufSize - 1, "%0.2f", utGetDouble(pu, name, p));break;
			case U_STRING:snprintf(buf, bufSize - 1, "%s", utGetStr(pu, name, p));break;
			default:strcpy(buf, "");break;
		}
		return buf;
	}

    char sUtypeNodeName[127 + 1];
    uAutoPtr uTmp(uInit(0));
    uTmp = utClone(pu);
    int iLen = uTmp->cnt;

    for(int i = 0; i < iLen; i ++)
    {
        //首先按从上往下的顺序取utype当前目录下所有节点，
        //并判断节点是否为utype，为utype则进入utype，然后回调自身
        memset(sUtypeNodeName, 0, sizeof(sUtypeNodeName));
        strcpy(sUtypeNodeName, utGetName(pu, i));
        //printf("*****************sUtypeNodeName=[%s]***********************\n", sUtypeNodeName);
        int uTypeType = utGetType(pu, sUtypeNodeName);
        if(U_STRUCT == uTypeType)
        {
            uGetStrByName(utGetStruct(pu, sUtypeNodeName), buf, bufSize, name);
            if('\0' != buf[0])
            {
                return buf;
            }
        }
    }
    return buf;
}

/*
 *
配置文件crm.cfg 新增内容
[CALL_LOG]
svc_${servicename}=1 ...
uni_accept_path=COMMON_INFO.TRACE_ID
log_path=udp://127.0.0.1:7788
 */
void TCtrlInfoEx2::init(const char *servicename, const char *bpname, const utype *uin){
	CallInfo *c = (CallInfo *)reserve1;
	
	char temp[128];
	//检查配置开关， 以及获取统一流水配置
	sprintf(temp, "svc_%s", servicename);
	if(strcmp(cfgGetStr("CALL_LOG", temp), "1") == 0){
		c->log_flag = 1;
	}else{
		c->log_flag = 0;
		return;
	}
	c->servicename = servicename;
	c->bpname = bpname;


	//获取统一流水，并保存到CallInfo 结构体中
	const char *uni_accept_path = cfgGetStr("CALL_LOG", "uni_accept_path");
	if(uni_accept_path[0] == 0){
		c->log_flag = 0;
		return;
	}
	try{
		const char *uniaccept = utGetStrByPath(uin, uni_accept_path);
		strcpy(c->universe_accept, uniaccept);
	}catch(uException &ue){
		L4C_DEBUG("===get path:%s failed code:%d msg:%s", uni_accept_path, ue.errCode, ue.errMsg);
		//strcpy(c->universe_accept, "<unknown>");
		c->log_flag = 0;
	}
	
	if( c->log_flag == 0 )
		 return;

	//建立UDP socket以及从配置中读取服务端地址
	const char *log_path = cfgGetStr("CALL_LOG", "log_path");
	c->log_handle = udp_socket();
	c->log_path = udp_make_addr(log_path);
	udp_getlocaladdr(c->localaddr);

	uGetStrByName(uin, c->login_no, sizeof(c->login_no), "LOGIN_NO");
	uGetStrByName(uin, c->phone_no, sizeof(c->phone_no), "PHONE_NO");
	uGetStrByName(uin, c->op_code, sizeof(c->op_code), "OP_CODE");
	
	uGetStrByName(uin, temp, sizeof(temp), "CALL_ID");
	c->push(temp);
}





#include <uuid/uuid.h>
const char * CallInfo::push(const char *callid){
	const char *p = NULL;

	if(callstack.size() > 0)
		p = callstack.back().c_str();
	callstack.push_back( callid );
	return p;
}

void CallInfo::pop(){
	callstack.pop_back();
}



static void timestr(struct timeval *t, char *str)
{
	struct tm *tm;
	tm = localtime(&t->tv_sec);
	sprintf(str, "%04d-%02d-%02d% 02d:%02d:%02d.%03d",
			tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday,
			tm->tm_hour, tm->tm_min, tm->tm_sec, t->tv_usec/1000);
}


void EntryRecord::setCode(long c){
	code = c;
}
void EntryRecord::setMsg(const char *m) {
	errmsg = m;
}

void EntryRecord::setIn(const utype *pin){ 	this->pin = pin; }
void EntryRecord::setIn(const char *pin){ 	this->s_pin = pin; }

void EntryRecord::setOut(const utype *pout){ this->pout = pout; }
void EntryRecord::setOut(const char *pout){ this->s_pout = pout; }

EntryRecord::EntryRecord(const char *func, TCtrlInfo *tinfo){
	CallInfo *x = (CallInfo *)(((TCtrlInfoEx2 *)tinfo)->reserve1);
	CallInfo *ci = (memcmp(x->__flag, "!_@", 4) != 0) ? NULL : x;
	cii = ci;
	if (ci == NULL)
		return;
  if(ci->log_flag == 0)
        return;		
		
	funcname = func;
	gettimeofday(&t1, NULL);
	code = 0;

	// 生成 callid
    uuid_t buf;
    uuid_generate(buf);
    uuid_unparse(buf, callid);
	//sprintf(callid, "%04d", ++ci->callid_seed);
	errmsg = NULL;
	pin = NULL;
	pout = NULL;
	s_pin = NULL;
	s_pout = NULL;
	callid_p = ci->push(callid);
}

EntryRecord::~EntryRecord(){
	
	L4C_DEBUG("xxxxx");
	
	if(cii == NULL)
		return;
	L4C_DEBUG("yyyyyy");			
	
	CallInfo * ci = (CallInfo *)cii;
	
  if(ci->log_flag == 0)
        return;		
        	
	ci->pop(); //弹出callid
  		      	
	gettimeofday(&t2, NULL);
	char _t1[32], _t2[32];
	timestr(&t1, _t1);
	timestr(&t2, _t2);
	stringstream ss;

	// <统一ID> <调用ID> <父调用ID> <服务编号>/<函数名> <服务名> <入参> <出参> <调用开始时间> <调用结束时间>
	// <主机IP> <端口号> <手机号> <工号> <模块代码> <结果编码> <结果信息>
	// 时间格式： yyyy-MM-ddHH:mm:ss.ff
	
	
	ss <<ci->universe_accept<<"~!~"<<callid<<"~!~";
	
	if( callid_p!=NULL )
		ss << callid_p ;
	else
		ss << "" ;
		
		ss<<"~!~xxx~!~" <<ci->servicename <<"~!~";
		
		ss <<"B001~!~01\~!~" <<funcname<<"~!~";
	
	if(s_pin != NULL){
		ss << s_pin;
	}else if(pin == NULL){
		ss << "<NULL>";
	}else{
		char *xmlstr = uUType2Xml(pin, "ROOT");
		if(xmlstr != NULL){
			ss << xmlstr;
			free(xmlstr);
		}
	}
	ss  << "~!~";
	
	if(s_pout != NULL){
		ss << s_pout;
	}else if(pout == NULL){
		ss << "<NULL>";
	}else{
		char *xmlstr = uUType2Xml(pout, "ROOT");
		if(xmlstr != NULL){
			ss << xmlstr;
			free(xmlstr);
		}
	}
	ss  << "~!~";
	
	ss << _t1 << "~!~" << _t2 << "~!~" << ci->localaddr << "~!~" << 0 << "~!~";
	ss << ci->phone_no<<"~!~"<<ci->login_no<<"~!~";
	ss << "BH_code~!~" << ci->op_code<<"~!~"<<code<<"~!~"<<errmsg==NULL?"":errmsg;
		
	L4C_DEBUG("send flume: %s",	ss.str().c_str());
	
	udp_sendto(ci->log_handle, ci->log_path, ss.str().c_str(), ss.str().length());
	/*snprintf(temp, sizeof(temp)-1, "%s\t%s\t%s\t%s\t[5]%s\t%s\t%s\t%s\t[9]%d\t%s\t%s\t%s\t[13]%d\t%s",
			ci->universe_accept, callid, callid_p, "xxx" ci->servicename, _t1, _t2,
			ci->localaddr, 0, ci->phone_no, ci->login_no, ci->op_code, code, errmsg==NULL?"":errmsg);
	udp_sendto(ci->log_handle, ci->log_path, temp, strlen(temp)); 
	printf("--func[%s] callid[%s] parentcallid[%s] time[%ld] code[%d]\n",
		funcname, callid, callid_p==NULL?"<nil>":callid_p,
		(t2.tv_sec-t1.tv_sec)*1000 + (t2.tv_usec-t1.tv_usec)/1000, code);
*/
}

// need a macro to use it
//#define CALLBP(bpname, uInParam, ctrlInfo) __CALLBP(bpname, #bpname, uInParam, ctrlInfo)
utype* __CALLBP(TUtypeFuncPtr bpfunc, const char *bpname, const utype *uInParam, TCtrlInfo *ctrlInfo){
    if(bpname == NULL)
		bpname = ((TCtrlInfoEx2 *)ctrlInfo)->getServiceName();
    L4C_DEBUG("CALLBP:%s",bpname);
    EntryRecord __e(bpname, ctrlInfo );
    __e.setIn(uInParam);
    try{
    	utype *ret = bpfunc(uInParam, ctrlInfo);
    	__e.setOut(ret);
    	
    	L4C_DEBUG("CALLBP OVER:%s",bpname);
        return ret;
    } catch (uException& err) {
		__e.setCode(303 * 1000000 + err.errCode);
		__e.setMsg(err.errMsg);
		throw err;
	} catch (otl_exception& otlErr) { // intercept OTL exceptions
		__e.setCode(302 * 1000000 + abs(otlErr.code));
		//snprintf(retMsg, sizeof(retMsg) - 1, "DBERR 错误：%s : %s : %s",
		//		otlErr.msg, otlErr.stm_text, otlErr.var_info);
		__e.setMsg((const char *)otlErr.msg);
		throw otlErr;
	} catch (appException& appErr) {
		__e.setCode(appErr.errCode);
		__e.setMsg(appErr.errMsg);
		throw appErr;
	} catch (std::exception& err) {
		__e.setCode(301 * 1000000);
		__e.setMsg(err.what());
		throw err;
	} catch (...) {
		__e.setCode(300 * 1000000);
		__e.setMsg("未知错误请联系系统管理员!");
		throw;
	}
	return NULL;
}
