/*********************************************************
 *
 *  FileName:
 *      offon_fordb.pc
 *
 *  Version:
 *      2006-6-1 17:59
 *
 *  tabstop = 4
 *
 ********************************************************/
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include "sqlca.h"
#include "sqlda.h"

#include "file_func.h"
#include "db_func.h"

EXEC SQL INCLUDE SQLCA;
char hlrcode[8];
FILE *logfp;


#define SQLERRMSG sqlca.sqlerrm.sqlerrmc

extern int db_logout();


extern int GenDaemon();
extern int db_login();

void usage(char *s)
{
	printf("%s\n\nUsage:offon_fordb -Hhlrcode [-NS(not import ssubcmd)] [-V]\n\n\n", s);
	exit(1);
}


long g_fpos;
void LogOut(int sig)
{
    FILE *fp;
    char fname[128];

	printf("LogOut signal==%d\n",sig);
    fflush(stdout);

	exit(1);
}

#define MAXLINE 500


struct
{
	char rectype[20];
	char hlrcode[6];
	time_t rec_time;
	int rc4opr;
	int tm4opr;
	int rc4opru;
	int tm4opru;
	int rc4ssub;
	int tm4ssub;
	int rc4snd;
	int tm4snd;
	int tm4fil;
} yy_time;

void yy_time_log(time_t t)
{
	char h[5];
	if(t-yy_time.rec_time >= 300){
		file_log("perf",
				"rectime=%ld,rectype=fordb,hlrcode=%s,rc4opr=%d,"
				"tm4opr=%d,rc4opru=%d,tm4opru=%d,rc4ssub=%d,tm4ssub=%d"
				",rc4snd=%d,tm4snd=%d,tm4fil=%d",
				t, yy_time.hlrcode, yy_time.rc4opr, yy_time.tm4opr/1000,
				yy_time.rc4opru, yy_time.tm4opru/1000,
				yy_time.rc4ssub, yy_time.tm4ssub/1000,
				yy_time.rc4snd, yy_time.tm4snd/1000, yy_time.tm4fil/1000);
		strcpy(h, yy_time.hlrcode);
		memset(&yy_time, 0, sizeof(yy_time));
		strcpy(yy_time.hlrcode, h);
		yy_time.rec_time = t;
	}
}




int io_check_read (int *fds, int count, int timeout)
{
    fd_set rfd;
    int i, ret, mfid, j;
    struct timeval tvl;

    mfid = 0;
    FD_ZERO (&rfd);
    for (i = 0; i < count; i++)
    {
        FD_SET (fds[i], &rfd);
        mfid = (fds[i] > mfid) ? fds[i] : mfid;
    }
    mfid++;
    tvl.tv_sec = timeout / 1000;
    tvl.tv_usec = (timeout % 1000) * 1000;

    ret = select (mfid, &rfd, NULL, NULL, &tvl);
    fprintf(logfp, "select return %d\n", ret);
    fflush(logfp);
    if (ret <= 0)
    {
        return ret;
    }
    j = 0;
    for (i = 0; i < count; i++)
    {
        if (FD_ISSET (fds[i], &rfd))
        {
              fds[j++] = fds[i];
        }
    }
    return ret;
}

struct tp_soprcmd
{
	long stream_id;
	long command_id;
	char msisdn[16];
	char imsi_no[22];
	char op_code[5];
	char cmdcode[4];
	char cmd_status;
	char priority;
	char ss_info1[16];
	char ss_info2[22];
	char ss_info3[122];
	char req_time[16];
	char retn[5];
	char login_no[7];
	char reply_time[16];
	char reply_info[200];
};

struct tp_soprcmdu
{
	char retn[5];
	char reply_time[16];
	char reply_info[200];
	long stream_id;
};

struct tp_ssubcmd
{
	long stream_id;
	long command_id;
	char cmdcode[4];
	char order_code[5];
	char serial;
	char msisdn[16];
	char imsi_no[21];
	char ss_info1[16];
	char ss_info2[22];
	char ss_info3[122];
	char retn[5];
	char parse_code[5];
};



struct tp_sndcmd
{
	long command_id;
	char hlr_code[3];
	char command_code[3];
	long id_no;
	char belong_code[8];
	char phone_no[16];
	char new_phone[16];
	char imsi_no[21];
	char new_imsi[21];
	char other_char[21];
	char op_code[5];
	char login_no[7];
	char request_time[15];
	char business_status;
	char group_id[11];
};


struct tp_databuf
{
	struct tp_soprcmd *soprcmd;
	int ct_sopr;
	struct tp_soprcmdu *soprcmdu;
	int ct_sopru;
	struct tp_ssubcmd *ssubcmd;
	int ct_ssubcmd;
	struct tp_sndcmd *sndcmd;
	int ct_sndcmd;
} databuf;

int read_buf(char *hlr_code, char *sdate, long *prpos, int *fno)
{
	static FILE *fp = NULL;
	static char cdate[9];
	static long rpos;
	int count = 0, llen, i;
	char filename[128];
	char line[2048], line1[2048];
	char timestr[30];
	struct tp_soprcmd *opr;
	struct tp_soprcmdu *popru, opru;
	struct tp_ssubcmd *sub;
	struct tp_sndcmd *snd;
	char *rp[30], *ptr;
	int data_flag = 0;
	struct timeval t1, t2;
	int x;

	gettimeofday(&t1, NULL);
	filename[0] = 0;
	databuf.ct_sopr = 0;
	databuf.ct_sopru = 0;
	databuf.ct_ssubcmd = 0;
	databuf.ct_sndcmd = 0;
	if(fp == NULL){
		cdate[0] = 0;
		get_file_pos(hlr_code, cdate, &rpos);
		get_data_file(filename, hlr_code, cdate);
		fp = fopen(filename, "r");
		if(fp != NULL && rpos > 0)
			fseek(fp, rpos, SEEK_SET);
		fprintf(logfp, "get_read_pos date:%s, fpos:%ld fp is null :%d\n", cdate, rpos, fp==NULL);
		fflush(logfp);
	}
	while(fp == NULL){
		rpos = 0;
		cdate[0] = 0;
		get_data_file(filename, hlr_code, cdate);
		fp = fopen(filename, "r");
		if(fp == NULL){
			fprintf(logfp, "fopen datafile111 [%s] fail\n", filename);
			fflush(logfp);
			sleep(1);
			continue;
		}
		fprintf(logfp, "open file %s, rpos:%ld\n", filename, rpos);
		fflush(logfp);
	}
	/*memset(&databuf, 0, sizeof(databuf)); */
	count = 0;
	while( (ptr = fgets(line, sizeof(line)-1, fp)) != NULL)
	{
		data_flag = 1;
		llen = strlen(line);
		if(line[llen-1] != '\n')
			continue;
		line[llen-1] = 0;
		strcpy(line1, line);
		llen = splitc(line+1, rp, 30, '|');
        fflush(stdout);
		if(line[0] == 'I'){
            if(llen < 14)
                continue;
			opr = &databuf.soprcmd[databuf.ct_sopr++];
			memset(opr, 0, sizeof(struct tp_soprcmd));
			opr->stream_id = atol(rp[0]);
			opr->command_id = atol(rp[1]);
			strcpy(opr->msisdn, rp[2]);
			strcpy(opr->imsi_no, rp[3]);
			strcpy(opr->op_code, rp[4]);
			sprintf(opr->cmdcode, "%s%c", rp[5], rp[6][0]);
			opr->cmd_status = '0';
			opr->priority = rp[7][0];
			strcpy(opr->ss_info1, rp[8]);
			strcpy(opr->ss_info2, rp[9]);
			strcpy(opr->ss_info3, rp[10]);
			strcpy(opr->req_time, rp[11]);
			strcpy(opr->retn, rp[12]);
			strcpy(opr->login_no, rp[13]);
			if(atoi(opr->retn) != 0)
				opr->cmd_status = '1';
			strcpy(opr->reply_time, opr->req_time);
			strcpy(opr->reply_info, "00");
		}else if(line[0] == 'U'){
			int xx = 0;
            if(llen < 4) continue;
			opru.stream_id = atol(rp[0]);
			strcpy(opru.retn, rp[1]);
			strcpy(opru.reply_time, rp[2]);
			strcpy(opru.reply_info, rp[3]);
			/*查找对应的insert记录*/
			for(i=0; i<databuf.ct_sopr; i++){
				opr = &databuf.soprcmd[i];
				if(opr->stream_id == opru.stream_id){
					strcpy(opr->retn, opru.retn);
					strcpy(opr->reply_time, opru.reply_time);
					strcpy(opr->reply_info, opru.reply_info);
					opr->cmd_status='1';
					xx = 1;
					break;
				}
			}
			if(xx == 0){
				/*没找到*/
				popru = &databuf.soprcmdu[databuf.ct_sopru++];
				memcpy(popru, &opru, sizeof(opru));
			}
		}else if(line[0] == 'S'){
            if(llen < 12) continue;
			sub = &databuf.ssubcmd[databuf.ct_ssubcmd++];
			sub->stream_id = atol(rp[0]);
			sub->command_id = atol(rp[1]);
			strcpy(sub->cmdcode, rp[2]);
			strcpy(sub->order_code, rp[3]);
			sub->serial = rp[4][0];
			strcpy(sub->msisdn, rp[5]);
			strcpy(sub->imsi_no, rp[6]);
			strcpy(sub->ss_info1, rp[7]);
			strcpy(sub->ss_info2, rp[8]);
			strcpy(sub->ss_info3, rp[9]);
			strcpy(sub->retn, rp[10]);
			strcpy(sub->parse_code, rp[11]);
		}else if(line[0] == 'D'){
            if(llen < 15) continue;
			/*D200150150612|X|56|1|hba-hc5|13880076349|13880076349|460008830666387|460008830666387|0|3212|vvvvvv|20081225191757|0|group*/
			snd = &databuf.sndcmd[databuf.ct_sndcmd++];
			snd->command_id = atol(rp[0]);
			strcpy(snd->hlr_code, rp[1]);
			strcpy(snd->command_code, rp[2]);
			snd->id_no = atol(rp[3]);
			strcpy(snd->belong_code, rp[4]);
			strcpy(snd->phone_no, rp[5]);
			strcpy(snd->new_phone, rp[6]);
			strcpy(snd->imsi_no, rp[7]);
			strcpy(snd->new_imsi, rp[8]);
			strcpy(snd->other_char, rp[9]);
			strcpy(snd->op_code, rp[10]);
			strcpy(snd->login_no, rp[11]);
			strcpy(snd->request_time, rp[12]);
			snd->business_status = rp[13][0];
			strcpy(snd->group_id, rp[14]);
		}
		if(++ count >= MAXLINE)
			break;
	}
    *fno = -1;
    /*fprintf(logfp, "readbuf: count:%d, ptr is null: %d\n",count, ptr==NULL);
    fflush(logfp); */
	if(ptr == NULL){
		/*已经读到文件末尾了, 检查是否需要切换文件*/
		char date[9];
		get_cur_timestr(date, 1);
		if(strcmp(date, cdate) != 0){
			char oldfile[128], bakfile[128];
			fclose(fp);
			/*移动旧文件到bak目录*/
			get_data_file(oldfile, hlr_code, cdate);
			sprintf(bakfile, "%s/databuf/bak/%s.%s", getenv("HOME"), hlr_code, cdate);
			rename(oldfile, bakfile);
			rpos = 0;
			get_data_file(filename, hlr_code, date);
			strcpy(cdate, date);
			fp = fopen(filename, "r");
		}else{
            *fno = fileno(fp);
        }
	}
	if(fp != NULL){
		rpos = ftell(fp);
	}
	strcpy(sdate, cdate);
	*prpos = rpos;
	gettimeofday(&t2, NULL);
	x = time_diff1(t1, t2);
	if(data_flag == 1)
		yy_time.tm4fil += x;
	return data_flag;
}


FILE * open_logfp(time_t t, FILE *fp1, char *hlr_code)
{
	struct tm *tv;
	char fname[128];

	static int curt = 0;

	tv=localtime(&t);
	if(tv->tm_mday != curt)
	{
		sprintf(fname,"%s/fdb%04d%02d%02d.%s",
				getenv("LOGDIR"), tv->tm_year+1900, tv->tm_mon+1,
				tv->tm_mday, hlr_code);
		if(fp1 != NULL)
			fclose(fp1);
		fp1 = fopen(fname,"a");
		if(fp1 == NULL)
		{
			printf("can't open %s for LOG[%d]\n", fname, errno);
			exit(1);
		}
		curt = tv->tm_mday;
	}
	return fp1;
}

int main(int argc,char **argv)
{

	int ret,count;
	int i;
	FILE *cfgfp;
	char cfgstr[256];
	char dbuser[32],dbpswd[32],dbname[32],bossdb[32],tname[64];
	char logfilename[256],logdir[256];
	time_t t;
	char tempstr[1024];
	char buf[1024], *rp[30];
	char cmdcode[4];
	char cmd_status[2];
    long c1, c2;
    time_t t1, t2, cur_tm;
    int counter = 0;
	int rec_ct;
	struct tp_soprcmd soprcmd[MAXLINE];
	struct tp_soprcmdu soprcmdu[MAXLINE];
	struct tp_ssubcmd ssubcmd[MAXLINE];
	struct tp_sndcmd sndcmd[MAXLINE];
	long cmdids[MAXLINE];
	int no_ssubcmd = 0; /*如果为1, 则不入库 ssubcmd数据*/
	struct timeval tv1, tv2;

	if(argc<2)
		usage("Incorrect Parameter!");

	GenDaemon();

	signal(SIGPIPE,SIG_IGN);
	signal(SIGCLD,SIG_IGN);
	signal(SIGINT,SIG_IGN);

	while(--argc>0)
	{
		if(argv[argc][0]!='-')
			usage("Incorrect Parameter!");

		switch(argv[argc][1])
		{
		case 'H':
			strncpy(hlrcode, argv[argc]+2,4);
			break;
		case 'V':
		case 'v':
			printf("\n\n	version = %s\n\n",VERSION);
			exit(0);
		case 'N':
			if(argv[argc][2] == 'S')
				no_ssubcmd = 1;
			break;
		default:
			usage("Unknow Parameter!");
			break;
		}
	}

	if(strlen(hlrcode) != 3 )
		usage("Incorrect parameter [hlrcode]!\n");

	logfp = open_logfp(time(NULL), NULL, hlrcode);
	set_hlrcode(hlrcode);

	if(logindb("gdblogin.cfg") != SQL_OK)
	{
		fprintf(logfp,"db_login(%s,%s,%s) failed!\n",dbuser,dbpswd,dbname);
		exit(1);
	}
    fprintf(logfp, "db login success\n");
    fflush(logfp);

    strcpy(yy_time.hlrcode, hlrcode);
    yy_time.rec_time = cur_tm = time(NULL);
    c2 = c1 = 0;
    counter = 0;
    time(&t1); t2 = t1;
	signal(SIGTERM,LogOut);

	databuf.soprcmd = soprcmd;
	databuf.soprcmdu = soprcmdu;
	databuf.ssubcmd = ssubcmd;
	databuf.sndcmd = sndcmd;
	while(1){
		long rpos = 0;
		char sdate[10];
        int fno[2];
		memset(buf, 0, sizeof(buf));
		if((t1 = time(NULL))-cur_tm > 20){ /*记录性能日志和检查日志文件翻转*/
			yy_time_log(t1);
			logfp = open_logfp(t1, logfp, hlrcode);
			cur_tm = t1;
		}

		ret = read_buf(hlrcode, sdate, &rpos, &fno[0]);
		if(ret == 0){
			sleep(1);
            /*if(fno[0] != -1){
                io_check_read(fno, 1, 5000);
            } */
			continue;
		}

		rec_ct = databuf.ct_sndcmd;
		if(rec_ct > 0){
			yy_time.rc4snd += rec_ct;
			gettimeofday(&tv1, NULL);
			sprintf(tempstr,"INSERT INTO sndcmdday%s (COMMAND_ID,HLR_CODE,COMMAND_CODE,COMMAND_ORDER,ID_NO,"
		    "BELONG_CODE,SM_CODE,PHONE_NO,NEW_PHONE,IMSI_NO, "
		     " NEW_IMSI,OTHER_CHAR,OP_CODE,TOTAL_DATE,OP_TIME, "
		      "LOGIN_NO,ORG_CODE,LOGIN_ACCEPT,REQUEST_TIME,BUSINESS_STATUS, "
		      "SEND_STATUS,SEND_TIME,GROUP_ID,ORG_ID) "
		      "VALUES(:v0,:v1,:v2,1,:v3,"
		      ":v4,'sm',:v5,:v6,:v7,"
		      ":v8,:v9,:v10,1,sysdate,"
		      ":v11,'org',1,to_date(:v12,'yyyymmddhh24miss'),:v13,"
		      "'0',sysdate,:v14,'org')",
		          hlrcode);
		    EXEC SQL PREPARE stmt4 FROM :tempstr;
		    EXEC SQL for :rec_ct EXECUTE stmt4 USING :sndcmd;
			if(SQLCODE != SQL_OK){
				fprintf(logfp, "fail insert sndcmd %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
			}
			gettimeofday(&tv2, NULL);
			yy_time.tm4snd += time_diff1(tv1, tv2);
		}

		rec_ct = databuf.ct_sopr;
		if(rec_ct > 0){
			yy_time.rc4opr += rec_ct;
			gettimeofday(&tv1, NULL);
			sprintf(tempstr,"INSERT INTO sOprCmd%s (stream_id,command_id,term_id,"
					"msisdn,imsi_no, op_code, command_code, cmd_status, phone_priority,"
					"ss_info1,ss_info2, ss_info3,request_time,reply_code,bak_status, "
					"bak_time,login_no, reply_time, reply_info) "
					"VALUES(:streamid, :command_id, 'def', :phone_no, :imsi_no, "
					":op_code, :cmdcode, :cmd_status, :priority, :ss_info1, :ss_info2, "
					":ss_info3, to_date(:req_time, 'yyyymmddhh24miss'), :retn, '0', "
					"sysdate,:login_no, :reply_time, :reply_info)",
				hlrcode);
			EXEC SQL PREPARE stmt1 FROM :tempstr;
			EXEC SQL for :rec_ct EXECUTE stmt1 USING :soprcmd;
			if(SQLCODE != SQL_OK){
				fprintf(logfp, "fail insert soprcmd %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
			}
			for(i=0; i<rec_ct; i++){
				cmdids[i] = soprcmd[i].command_id;
				if(soprcmd[i].stream_id > 2100000000000){
					fprintf(logfp, "sssssss %ld %ld %s %s rc:%d idx:%d\n",
							soprcmd[i].stream_id, soprcmd[i].command_id, soprcmd[i].msisdn,
							soprcmd[i].cmdcode, rec_ct, i);

				}
			}
		    sprintf(tempstr, "UPDATE sndcmdday%s set send_status='1' "
		    		"where command_id=:command_id and send_status='0'",
		        hlrcode);
		    EXEC SQL PREPARE stmt5 FROM :tempstr;
		    EXEC SQL for :rec_ct EXECUTE stmt5 USING :cmdids;
			if(SQLCODE != SQL_OK && SQLCODE != 1403){
				fprintf(logfp, "fail update sndcmd %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
			}
			gettimeofday(&tv2, NULL);
			yy_time.tm4opr += time_diff1(tv1, tv2);
		}
		rec_ct = databuf.ct_sopru;
		if(rec_ct > 0){
			yy_time.rc4opru += rec_ct;
			gettimeofday(&tv1, NULL);
			sprintf(tempstr, "UPDATE sOprCmd%s SET cmd_status='1',reply_code=:v1, "
					"reply_time=to_date(:v4, 'yyyymmddhh24miss'), reply_info=:v2,bak_time=sysdate "
					"WHERE stream_id=to_number(:v3)",
				hlrcode);
			EXEC SQL PREPARE stmt2 FROM :tempstr;
			EXEC SQL for :rec_ct EXECUTE stmt2 USING :soprcmdu;
			if(SQLCODE != SQL_OK){
				fprintf(logfp, "fail update soprcmd %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
			}
			gettimeofday(&tv2, NULL);
			yy_time.tm4opru += time_diff1(tv1, tv2);
		}
		rec_ct = databuf.ct_ssubcmd;
		if(rec_ct > 0){
			yy_time.rc4ssub += rec_ct;
			gettimeofday(&tv1, NULL);
			sprintf(tempstr,"INSERT INTO sSubCmd%s (stream_id,command_id,command_code,"
					"order_code,serial, msisdn,imsi_no,ss_info1,ss_info2,ss_info3,"
				" reply_code,reply_time,parse_code) "
				"VALUES(:v1,:v2,:v3,:v4,:v5,:v6,:v7,:v8,:v9,:10,:v11,sysdate,:v12)",
				hlrcode);
			EXEC SQL PREPARE stmt3 FROM :tempstr;
			EXEC SQL for :rec_ct EXECUTE stmt3 USING :ssubcmd;
			if(SQLCODE != SQL_OK){
				fprintf(logfp, "fail insert ssubcmd %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
			}
			gettimeofday(&tv2, NULL);
			yy_time.tm4ssub += time_diff1(tv1, tv2);
		}
		if(databuf.ct_ssubcmd + databuf.ct_sopru + databuf.ct_sopr
				+ databuf.ct_sndcmd > 0){
			/*提交并保存断点, 如果提交失败,退出进程*/
			EXEC SQL commit;
			if(SQLCODE == SQL_OK){
				fprintf(logfp, "commit ok, opr:%d opru:%d,ssub:%d,sndcmd:%d\n",
						databuf.ct_sopr, databuf.ct_sopru, databuf.ct_ssubcmd, databuf.ct_sndcmd);
				fflush(logfp);
			}else{
				fprintf(logfp, "commit failed %d[%s]\n", SQLCODE, SQLERRMSG);
				fflush(logfp);
				exit(2);
			}
		}
		if(ret == 1)
			sav_file_pos(hlrcode, sdate, rpos);
	}

	return 0;
}
